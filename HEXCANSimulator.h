// HEXCANSimulator.h


//Firmware version
#define VERSIONMAJOR		 1
#define VERSIONMINOR		84

//MAGIC bytes for received and transmitted packet 
#define	TXMagicByte			0x4D
#define	RXMagicByte			0x53

//Command ACK packet reply codes
#define	ACK_OK				0xFE
#define	ACK_ERR				0xFF

//Constants for Hex interface Commands
#define	UpdateFW			0x01
#define	GetVersion			0x02
#define	SetBaudrate			0x03
#define GetInterfaceID		0x04
#define SoftReset			0x08
#define GetFOscValue		0x17
#define SetFOscValue		0x18
#define	KLineTest			0x82
#define	VAGInit				0x84
#define	RevInit				0x86
#define	FastInit			0x98
#define CANMode				0xB0
#define CANMode_ConfigCAN	0xB1
#define CANMode_WriteConfig	0xB2
#define CANMode_WriteMASK	0xB3
#define CANMode_WriteFILTER	0xB4
#define CANMode_WriteRXCTRL	0xB5
#define CANMode_NormalMode	0xB6
#define CANMode_ReceivedMsg	0xB7
#define CANMode_SendMsg		0xB8
#define CANMode_BusError	0xB9
#define CANMode_StopCANMode	0xA0

typedef struct sRXPacket {
	unsigned char MAGIC;
	unsigned char Length;
	unsigned char Command;
	unsigned char Data[125];
} sRXPacket_t;



struct sQLONG { 
	unsigned __int32 First;
	unsigned __int32 Second;
	unsigned __int32 Third;
	unsigned __int32 Fourth;
};

struct sDLONG { 
	unsigned __int32 First;
	unsigned __int32 Second;
};


//CAN XOR Table
unsigned char CANMsgXORTable[256] =
{
    0x00, 0xEA, 0x28, 0x3A, 0x50, 0x1D, 0xB7, 0x58, 0xDB, 0x11, 0x60, 0x0E, 0xE2, 0xC1, 0x41, 0xD8, 
    0x80, 0x2C, 0x70, 0x3F, 0xB0, 0xB3, 0xD7, 0x58, 0xBE, 0xC2, 0x42, 0x8D, 0xFB, 0xB2, 0xB6, 0x9F, 
    0xB5, 0xEE, 0x05, 0xEC, 0x66, 0x55, 0x9F, 0xEE, 0x2C, 0xE0, 0xAB, 0x05, 0x79, 0x85, 0x56, 0x76, 
    0x0C, 0x5B, 0x6B, 0xB3, 0x20, 0xFE, 0x25, 0xDD, 0xE3, 0x35, 0x41, 0x87, 0x29, 0xD2, 0x56, 0xBD, 
    0x62, 0xDA, 0x69, 0x44, 0xC9, 0xE6, 0xBC, 0x24, 0xDF, 0xC9, 0xE8, 0x64, 0x18, 0x73, 0x2B, 0x15, 
    0xD4, 0x16, 0x03, 0x92, 0x90, 0x87, 0xFC, 0x05, 0x5E, 0xE6, 0xC6, 0x2D, 0x92, 0x81, 0x8A, 0x5F, 
    0xBF, 0xF6, 0x7E, 0xCB, 0xE2, 0x98, 0xB8, 0x01, 0xDC, 0x14, 0x40, 0xB4, 0x26, 0x55, 0x68, 0xBD, 
    0xC0, 0xA4, 0x60, 0x62, 0x6A, 0x14, 0x05, 0xD9, 0x17, 0x1D, 0xFA, 0x08, 0x9F, 0x87, 0xFA, 0x8F, 
    0xB4, 0x89, 0x6C, 0x08, 0x17, 0x33, 0x38, 0x8D, 0x0B, 0x09, 0xDA, 0x7B, 0x0B, 0xF1, 0xB5, 0x76, 
    0xB8, 0x4F, 0xA9, 0xAE, 0x15, 0x6E, 0xE7, 0x60, 0xF6, 0x22, 0x04, 0x9F, 0xB6, 0xAB, 0x4D, 0x54, 
    0x29, 0xDD, 0x5B, 0x84, 0xD1, 0x7E, 0xE7, 0xD1, 0x55, 0xF0, 0xDF, 0x44, 0x2E, 0x0F, 0xB8, 0x49, 
    0xA4, 0x5D, 0x07, 0xFB, 0xF9, 0x5D, 0x4B, 0xA2, 0xE4, 0x3C, 0x0D, 0x7A, 0x41, 0xB6, 0x2C, 0xB7, 
    0x06, 0x38, 0x72, 0xC5, 0x79, 0x42, 0x6A, 0xD4, 0xA0, 0x10, 0x76, 0x94, 0xF9, 0x79, 0x1C, 0x3D, 
    0x6C, 0x17, 0xA1, 0xD3, 0x7E, 0xA8, 0xD9, 0xA8, 0xC7, 0xB4, 0x3D, 0x22, 0xA6, 0x71, 0x3E, 0xBE, 
    0x33, 0xE3, 0xD9, 0x55, 0x75, 0x47, 0x6C, 0x9F, 0xD6, 0xB2, 0xC8, 0xF5, 0xD3, 0xF6, 0x87, 0x5B, 
    0xF8, 0xC5, 0xA0, 0xBD, 0x0C, 0x19, 0x38, 0x79, 0x89, 0xD2, 0xBB, 0x1E, 0x4F, 0xA1, 0x2C, 0x73
};



//Big number constants
unsigned char QLONG00B8[16] = 
{
    0xBD, 0xA1, 0xC6, 0xB9, 0x2D, 0xCB, 0xD2, 0x81, 0x7A, 0x33, 0x29, 0x0C, 0x79, 0x2A, 0x41, 0x5F
};

unsigned char QLONG00C0[16] =
{
    0x43, 0xAC, 0x71, 0xC1, 0xAF, 0x1F, 0x33, 0xC4, 0x46, 0xE1, 0x14, 0x28, 0x90, 0x54, 0x82, 0x31
};

//Data stored in EEPROM
unsigned char InterfaceID[16] = {'R','O','S','S','T','E','C','H',0x00,0x00,0x00,0xA8,0xB0,0xE7,0x92,0x24};

unsigned char EE001B[1] = {0xFF};
unsigned char EE001C[4] = {0x02,0x00,0x00,0x00};